package com.rio.rostry

import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createAndroidComposeRule
import androidx.test.ext.junit4.runners.AndroidJUnit4
import androidx.test.filters.MediumTest
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@MediumTest
@RunWith(AndroidJUnit4::class)
@HiltAndroidTest
class BasicNavigationTest {

    @get:Rule(order = 0)
    val hiltRule = HiltAndroidRule(this)

    @get:Rule(order = 1)
    val composeTestRule = createAndroidComposeRule<MainActivity>()

    @Before
    fun setup() {
        hiltRule.inject()
    }

    @Test
    fun testAuthScreenNavigation() {
        // Start on login screen
        composeTestRule.onNodeWithText("Login").assertExists()
        
        // Navigate to register
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        composeTestRule.onNodeWithText("Register").assertExists()
        
        // Navigate back to login
        composeTestRule.onNodeWithText("Already have an account? Login").performClick()
        composeTestRule.waitForIdle()
        composeTestRule.onNodeWithText("Login").assertExists()
        
        // Navigate to forgot password
        composeTestRule.onNodeWithText("Forgot Password?").performClick()
        composeTestRule.waitForIdle()
        composeTestRule.onNodeWithText("Reset Password").assertExists()
        
        // Navigate back
        composeTestRule.onNodeWithContentDescription("Navigate back").performClick()
        composeTestRule.waitForIdle()
        composeTestRule.onNodeWithText("Login").assertExists()
    }

    @Test
    fun testScreenTransitions() {
        // Test smooth transitions between screens
        val screens = listOf(
            "Don't have an account? Register" to "Register",
            "Already have an account? Login" to "Login",
            "Forgot Password?" to "Reset Password"
        )
        
        screens.forEach { (buttonText, expectedScreen) ->
            composeTestRule.onNodeWithText(buttonText).performClick()
            composeTestRule.waitForIdle()
            composeTestRule.onNodeWithText(expectedScreen).assertExists()
            
            // Navigate back if not on login
            if (expectedScreen != "Login") {
                if (expectedScreen == "Register") {
                    composeTestRule.onNodeWithText("Already have an account? Login").performClick()
                } else {
                    composeTestRule.onNodeWithContentDescription("Navigate back").performClick()
                }
                composeTestRule.waitForIdle()
            }
        }
    }

    @Test
    fun testFormValidation() {
        // Test basic form validation on login
        composeTestRule.onNodeWithText("Login").performClick()
        composeTestRule.waitForIdle()
        
        // Should still be on login screen (validation failed)
        composeTestRule.onNodeWithText("Login").assertExists()
        
        // Test register form validation
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        composeTestRule.onNodeWithText("Register").performClick()
        composeTestRule.waitForIdle()
        
        // Should still be on register screen (validation failed)
        composeTestRule.onNodeWithText("Register").assertExists()
    }

    @Test
    fun testUIResponsiveness() {
        // Test that UI responds quickly to user interactions
        val startTime = System.currentTimeMillis()
        
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        val endTime = System.currentTimeMillis()
        val responseTime = endTime - startTime
        
        // Navigation should complete within 2 seconds
        assert(responseTime < 2000) { "Navigation took too long: ${responseTime}ms" }
        
        composeTestRule.onNodeWithText("Register").assertExists()
    }

    @Test
    fun testErrorHandling() {
        // Test that app handles errors gracefully
        composeTestRule.onNodeWithText("Email").performTextInput("invalid-email")
        composeTestRule.onNodeWithText("Password").performTextInput("weak")
        composeTestRule.onNodeWithText("Login").performClick()
        composeTestRule.waitForIdle()
        
        // App should not crash and should show appropriate feedback
        composeTestRule.onNodeWithText("Login").assertExists()
    }
}