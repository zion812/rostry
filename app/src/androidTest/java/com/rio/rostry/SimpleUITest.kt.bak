package com.rio.rostry

import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createAndroidComposeRule
import androidx.test.ext.junit4.runners.AndroidJUnit4
import androidx.test.filters.LargeTest
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@LargeTest
@RunWith(AndroidJUnit4::class)
@HiltAndroidTest
class SimpleUITest {

    @get:Rule(order = 0)
    val hiltRule = HiltAndroidRule(this)

    @get:Rule(order = 1)
    val composeTestRule = createAndroidComposeRule<MainActivity>()

    @Before
    fun setup() {
        hiltRule.inject()
    }

    @Test
    fun appLaunchesSuccessfully() {
        // Test that the app launches without crashing
        composeTestRule.waitForIdle()
        
        // Check that we're on the login screen initially
        composeTestRule.onNodeWithText("Login").assertExists()
    }

    @Test
    fun loginScreenElementsExist() {
        // Test that login screen has required elements
        composeTestRule.onNodeWithText("Email").assertExists()
        composeTestRule.onNodeWithText("Password").assertExists()
        composeTestRule.onNodeWithText("Login").assertExists()
        composeTestRule.onNodeWithText("Don't have an account? Register").assertExists()
        composeTestRule.onNodeWithText("Forgot Password?").assertExists()
    }

    @Test
    fun navigationToRegisterWorks() {
        // Test navigation to register screen
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        // Check that we're now on register screen
        composeTestRule.onNodeWithText("Register").assertExists()
        composeTestRule.onNodeWithText("Already have an account? Login").assertExists()
    }

    @Test
    fun navigationToForgotPasswordWorks() {
        // Test navigation to forgot password screen
        composeTestRule.onNodeWithText("Forgot Password?").performClick()
        composeTestRule.waitForIdle()
        
        // Check that we're now on forgot password screen
        composeTestRule.onNodeWithText("Reset Password").assertExists()
        composeTestRule.onNodeWithContentDescription("Navigate back").assertExists()
    }

    @Test
    fun backNavigationWorks() {
        // Test back navigation from forgot password
        composeTestRule.onNodeWithText("Forgot Password?").performClick()
        composeTestRule.waitForIdle()
        
        composeTestRule.onNodeWithContentDescription("Navigate back").performClick()
        composeTestRule.waitForIdle()
        
        // Should be back on login screen
        composeTestRule.onNodeWithText("Login").assertExists()
    }

    @Test
    fun formInputWorks() {
        // Test that form inputs accept text
        composeTestRule.onNodeWithText("Email").performTextInput("test@example.com")
        composeTestRule.onNodeWithText("Password").performTextInput("password123")
        
        // Verify text was entered
        composeTestRule.onNodeWithText("test@example.com").assertExists()
    }

    @Test
    fun registerFormWorks() {
        // Navigate to register and test form
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        // Test register form inputs
        composeTestRule.onNodeWithText("Full Name").performTextInput("Test User")
        composeTestRule.onNodeWithText("Email").performTextInput("test@example.com")
        composeTestRule.onNodeWithText("Password").performTextInput("password123")
        composeTestRule.onNodeWithText("Confirm Password").performTextInput("password123")
        
        // Verify inputs work
        composeTestRule.onNodeWithText("Test User").assertExists()
        composeTestRule.onNodeWithText("test@example.com").assertExists()
    }

    @Test
    fun uiElementsAreClickable() {
        // Test that UI elements respond to clicks
        composeTestRule.onNodeWithText("Login").assertHasClickAction()
        composeTestRule.onNodeWithText("Don't have an account? Register").assertHasClickAction()
        composeTestRule.onNodeWithText("Forgot Password?").assertHasClickAction()
        
        // Test register screen elements
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        composeTestRule.onNodeWithText("Register").assertHasClickAction()
        composeTestRule.onNodeWithText("Already have an account? Login").assertHasClickAction()
    }

    @Test
    fun appHandlesInvalidInput() {
        // Test app behavior with invalid input
        composeTestRule.onNodeWithText("Email").performTextInput("invalid-email")
        composeTestRule.onNodeWithText("Password").performTextInput("123")
        composeTestRule.onNodeWithText("Login").performClick()
        composeTestRule.waitForIdle()
        
        // App should handle invalid input gracefully (no crash)
        composeTestRule.onNodeWithText("Login").assertExists()
    }

    @Test
    fun appStateIsConsistent() {
        // Test that app state remains consistent during navigation
        composeTestRule.onNodeWithText("Email").performTextInput("test@example.com")
        
        // Navigate away and back
        composeTestRule.onNodeWithText("Don't have an account? Register").performClick()
        composeTestRule.waitForIdle()
        
        composeTestRule.onNodeWithText("Already have an account? Login").performClick()
        composeTestRule.waitForIdle()
        
        // Email field should be cleared (or maintain state based on app design)
        composeTestRule.onNodeWithText("Login").assertExists()
    }
}